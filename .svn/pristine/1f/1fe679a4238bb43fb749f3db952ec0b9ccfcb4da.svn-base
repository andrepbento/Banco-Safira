package persistence.usuarios;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Collection;

import exception.PessoaNaoEncontradaException;
import model.Funcionario;
import model.Pessoa;
import util.ConnectionFactory;

public class PessoaBusiness<T extends Pessoa> implements PessoaRepository<T> {
	
	protected Class<T> clazz;
	
	public boolean isDisponivel(String cpf) {
		Connection c = ConnectionFactory.getConnection();
		String sql = "SELECT * FROM pessoa where cpf=?";
		PreparedStatement statement = null;
		ResultSet result = null;
		
		try {
			statement = c.prepareStatement(sql);

			statement.setString(1, cpf + "");

			result = statement.executeQuery();

		if (!result.next() ) {

				return true;

			} else {

				return false;
			}

		} catch (SQLException e) {
			System.out.println("Não foi possível fazer a Consulta!");
			e.printStackTrace();
		} finally {
			try {

				result.close();
				statement.close();
				c.close();

			} catch (SQLException e) {
				System.out.println("Não foi possível fechar a conexão!");

			}
		}
		return true;
	}
	
	public Pessoa getPessoa(String cpf) {
		Connection c = ConnectionFactory.getConnection();
		String sql = "SELECT * FROM pessoa where cpf=?";

		PreparedStatement statement = null;
		ResultSet result = null;
		try {

			statement = c.prepareStatement(sql, ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
			statement.setString(1, cpf);
			result = statement.executeQuery();

			if (!result.next()) {
				throw new PessoaNaoEncontradaException();
			}

			result.absolute(0);

			Funcionario func = null;

			while (result.next()) {
				func = new Funcionario();
				func.setId(result.getInt("id"));
				func.setNome(result.getString("nome"));
				func.setCpf(result.getString("cpf"));
				func.setEmail(result.getString("email"));
				func.setDataNascimento(new java.util.Date(result.getDate("data_nascimento").getTime()));

			}

			return func;

		} catch (SQLException e) {
			System.out.println("Não foi possível fazer a Consulta!");
			e.printStackTrace();

		} catch (PessoaNaoEncontradaException e2) {
			System.out.println("Pessoa não encontrada");

		} finally {
			try {

				result.close();

				statement.close();

				c.close();

			} catch (SQLException e) {
				System.out.println("Não foi possível fechar a conexão!");

			}
		}
		return null;
	}

	@Override
	public void salvar(T pessoa) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void deletar(T pessoa) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void atualizar(T Pessoa) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public Collection<T> lista() {
		
		return null;
	}
}
